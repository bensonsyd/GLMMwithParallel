D.star<-Diagonal(length(u.star),D.star)
#now D.star.inv and D.star are both diagonal matrices
#Diagonal from Matrix package is used bc these are sparse matrices
#If q (# rand effs) is large, then need to be careful with these
#determine m1, m2, m3 based on probs p1, p2, p3
foo<-runif(m)
m1<-sum(foo<p1)
m2<-sum(foo<p1+p2)-m1
m3<-m-m1-m2
if(m1>0) genData<-rmvt(m1,sigma=Dstarnotsparse,df=zeta,type=c("shifted"))
if(m1==0) genData<-NULL
#generate m2 from N(u*,D*)
if(m2>0) genData2<-genRand(u.star,D.star,m2)
if(m2==0) genData2<-NULL
#generate m3 from N(u*,(Z'c''(Xbeta*+zu*)Z+D*^{-1})^-1)
if(m3>0){
Z=do.call(cbind,mod.mcml$z)
eta.star<-as.vector(mod.mcml$x%*%beta.pql+Z%*%u.star)
if(family.glmm$family.glmm=="bernoulli.glmm") {cdouble<-family.glmm$cpp(eta.star)}
if(family.glmm$family.glmm=="poisson.glmm"){cdouble<-family.glmm$cpp(eta.star)}
if(family.glmm$family.glmm=="binomial.glmm"){cdouble<-family.glmm$cpp(eta.star, ntrials)}
#still a vector
cdouble<-Diagonal(length(cdouble),cdouble)
Sigmuh.inv<- t(Z)%*%cdouble%*%Z+D.star.inv
Sigmuh<-solve(Sigmuh.inv)
genData3<-genRand(u.star,Sigmuh,m3)
}
if(m3==0) genData3<-NULL
#	#these are from distribution based on data
#	if(distrib=="tee")genData<-genRand(sigma.gen,s.pql,mod.mcml$z,m1,distrib="tee",gamm)
#	if(distrib=="normal")genData<-genRand(sigma.pql,s.pql,mod.mcml$z,m1,distrib="normal",gamm)
#	#these are from standard normal
#	ones<-rep(1,length(sigma.pql))
#	zeros<-rep(0,length(s.pql))
#	genData2<-genRand(ones,zeros,mod.mcml$z,m2,distrib="normal",gamm)
umat<-rbind(genData,genData2,genData3)
no_cores <- max(1, detectCores() - 1)
return(list(umat=umat, par = par.init, nbeta=ncol(mod.mcml$x), nu.pql=nu.pql, u.star=u.star, mod.mcml=mod.mcml, family.glmm=family.glmm, cache=cache, p1=p1, p2=p2, p3=p3, m1=m1, D.star=D.star, Sigmuh=Sigmuh, Sigmuh.inv=Sigmuh.inv, zeta=zeta, ntrials=ntrials, no_cores = no_cores))
}
cc <- Checkglmm(fixed = Mate ~ 0 + Cross,random = list(~ 0 + Female, ~ 0 + Male), varcomps.names = c("F", "M"),data = salamander, family.glmm = bernoulli.glmm, m=1000, doPQL=FALSE, debug=FALSE,p1=1/3,p2=1/3,p3=1/3,rmax=1000,iterlim=1000,par.init=NULL,zeta=5)
library(glmm)
data(salamander)
cc <- Checkglmm(fixed = Mate ~ 0 + Cross,random = list(~ 0 + Female, ~ 0 + Male), varcomps.names = c("F", "M"),data = salamander, family.glmm = bernoulli.glmm, m=1000, doPQL=FALSE, debug=FALSE,p1=1/3,p2=1/3,p3=1/3,rmax=1000,iterlim=1000,par.init=NULL,zeta=5)
library(parallel)
library(doParallel)
library(foreach)
library(itertools)
cc <- Checkglmm(fixed = Mate ~ 0 + Cross,random = list(~ 0 + Female, ~ 0 + Male), varcomps.names = c("F", "M"),data = salamander, family.glmm = bernoulli.glmm, m=1000, doPQL=FALSE, debug=FALSE,p1=1/3,p2=1/3,p3=1/3,rmax=1000,iterlim=1000,par.init=NULL,zeta=5)
par = cc$par
nbeta = cc$nbeta
nu.pql = cc$nu.pql
umat = cc$umat
u.star = cc$u.star
mod.mcml = cc$mod.mcml
family.glmm = cc$family.glmm
cache = cc$cache
p1 = cc$p1
p2 = cc$p2
p3 = cc$p3
m1 = cc$m1
D.star = cc$D.star
Sigmuh = cc$Sigmuh
Sigmuh.inv = cc$Sigmuh.inv
zeta = cc$zeta
ntrials = cc$ntrials
no_cores = cc$no_cores
beta<-par[1:nbeta]
nu<-par[-(1:nbeta)]
m<-nrow(umat)
if (!missing(cache)) stopifnot(is.environment(cache))
if(any(nu<=0)){
out<-list(value=-Inf,gradient=rep(1,length(par)),hessian=as.matrix(c(rep(1,length(par)^2)),nrow=length(par)))
return(out)
}
Z=do.call(cbind,mod.mcml$z)
T<-length(mod.mcml$z)
nrand<-lapply(mod.mcml$z,ncol)
nrandom<-unlist(nrand)
family.glmm<-getFamily(family.glmm)
if(family.glmm$family.glmm=="bernoulli.glmm"){family_glmm=1}
if(family.glmm$family.glmm=="poisson.glmm"){family_glmm=2}
if(family.glmm$family.glmm=="binomial.glmm"){family_glmm=3}
Dstarinvdiag<-1/diag(D.star)
D.star.inv<-diag(Dstarinvdiag)
logdet.D.star.inv<-	-sum(log(diag(D.star)))
logdet.Sigmuh.inv<-sum(log(eigen(Sigmuh.inv,symmetric=TRUE)$values))
myq<-nrow(D.star.inv)
tconst<-tconstant(zeta,myq,Dstarinvdiag)
eek<-getEk(mod.mcml$z)
preDinvfornu<-Map("*",eek,(1/nu))
Dinvfornu<-addVecs(preDinvfornu)
logdetDinvfornu<-sum(log(Dinvfornu))
Dinvfornu <- diag(Dinvfornu)
meow<-rep(1,T+1)
meow[1]<-0
throwaway<-T+1
meow[2:throwaway]<-cumsum(nrandom)
pea<-c(p1,p2,p3)
n <- nrow(mod.mcml$x)
newsig <- as.double(Sigmuh.inv)
grad <- double(length(par))
hess <- double((length(par))^2)
lnps <- length(pea)
val <- double(1)
vv <- double(m)
stuff<-.C("objfunc", as.double(mod.mcml$y),as.double(t(umat)), as.integer(myq), as.integer(m), as.double(mod.mcml$x), as.integer(n), as.integer(nbeta), as.double(beta), as.double(Z), as.double(Dinvfornu), as.double(logdetDinvfornu),as.integer(family_glmm), as.double(D.star.inv), as.double(logdet.D.star.inv), as.double(u.star), as.double(Sigmuh.inv), as.double(logdet.Sigmuh.inv), pea=as.double(pea), nps=as.integer(length(pea)), T=as.integer(T), nrandom=as.integer(nrandom), meow=as.integer(meow),nu=as.double(nu), zeta=as.integer(zeta),tconst=as.double(tconst), v=double(m), ntrials=as.integer(ntrials), value=double(1),gradient=double(length(par)),hessian=double((length(par))^2))
stuff
unlist(stuff)
umat
cl <- makeCluster(no_cores)
registerDoParallel(cl)
clusterEvalQ(cl, library(itertools))
clusterExport(cl, c("umat", "myq", "m", "mod.mcml", "n", "nbeta", "beta", "Z", "Dinvfornu", "logdetDinvfornu", "family_glmm", "D.star.inv", "logdet.D.star.inv", "u.star", "newsig", "lnps", "logdet.Sigmuh.inv", "pea", "T", "nrandom", "meow", "nu", "zeta", "tconst", "ntrials", "grad", "hess", "val", "vv"), envir = environment())
stuff <- foreach(umat=isplitRows(umat, chunks = no_cores)) %dopar% {.C("objfunc", as.double(mod.mcml$y),as.double(t(umat)), as.integer(myq), as.integer(m), as.double(mod.mcml$x), as.integer(n), as.integer(nbeta), as.double(beta), as.double(Z), as.double(Dinvfornu), as.double(logdetDinvfornu),as.integer(family_glmm), as.double(D.star.inv), as.double(logdet.D.star.inv), as.double(u.star), as.double(newsig), as.double(logdet.Sigmuh.inv), pea=as.double(pea), nps=as.integer(lnps), T=as.integer(T), nrandom=as.integer(nrandom), meow=as.integer(meow),nu=as.double(nu), zeta=as.integer(zeta),tconst=as.double(tconst), v=as.double(vv), ntrials=as.integer(ntrials), value=as.double(val),gradient=as.double(grad),hessian=as.double(hess))}
?dyn.load
dyn.load("objfunc.c")
setwd("~/Documents/UST/R_Research/glmm-master/glmm/src")
dyn.load("objfunc.c")
dyn.load(objfunc.c)
dyn.load(objfunc.c, type = "Call")
dyn.load("objfunc", type = "Call")
dyn.load("objfunc.c", type = "Call")
no_cores <- 2
cl <- makeCluster(no_cores)
registerDoParallel(cl)
clusterEvalQ(cl, library(itertools))
clusterExport(cl, c("umat", "myq", "m", "mod.mcml", "n", "nbeta", "beta", "Z", "Dinvfornu", "logdetDinvfornu", "family_glmm", "D.star.inv", "logdet.D.star.inv", "u.star", "newsig", "lnps", "logdet.Sigmuh.inv", "pea", "T", "nrandom", "meow", "nu", "zeta", "tconst", "ntrials", "grad", "hess", "val", "vv"), envir = environment())
stuff <- foreach(umat=isplitRows(umat, chunks = no_cores)) %dopar% {.C("objfunc", as.double(mod.mcml$y),as.double(t(umat)), as.integer(myq), as.integer(m), as.double(mod.mcml$x), as.integer(n), as.integer(nbeta), as.double(beta), as.double(Z), as.double(Dinvfornu), as.double(logdetDinvfornu),as.integer(family_glmm), as.double(D.star.inv), as.double(logdet.D.star.inv), as.double(u.star), as.double(newsig), as.double(logdet.Sigmuh.inv), pea=as.double(pea), nps=as.integer(lnps), T=as.integer(T), nrandom=as.integer(nrandom), meow=as.integer(meow),nu=as.double(nu), zeta=as.integer(zeta),tconst=as.double(tconst), v=as.double(vv), ntrials=as.integer(ntrials), value=as.double(val),gradient=as.double(grad),hessian=as.double(hess))}
dyn.load("objfunc.so")
Checkglmm <- function(fixed,random, varcomps.names,data, family.glmm, m,varcomps.equal, doPQL=TRUE, debug=FALSE,p1=1/3,p2=1/3,p3=1/3,rmax=1000,iterlim=1000,par.init=NULL,zeta=5){
if(missing(varcomps.names)) stop("Names for the variance components must be supplied through varcomps.names")
if(is.vector(varcomps.names)!=1) stop("varcomps.names must be a vector")
if(missing(varcomps.equal)){
varcomps.equal<- c(1:length(varcomps.names))}
call<-match.call()
#this much will figure out how to interpret the formula
#first the fixed effects part
stopifnot(inherits(fixed, "formula"))
if (missing(data)) {
barf <- lm(fixed, method = "model.frame")
} else {
stopifnot(inherits(data, "data.frame"))
barf <- lm(fixed, data = data, method = "model.frame")
}
x <- model.matrix(fixed, data = barf)
y <- model.response(barf)
#family stuff
family.glmm<-getFamily(family.glmm)
#check that only binomial has y being matrix
if(length(dim(y))==2){
if(family.glmm$family.glmm!="binomial.glmm") {
stop("For the family you've specified, only a vector is appropriate as the response. Binomial is the only family that allows you to specify the response as a matrix.")
}
}
ntrials <- rep(1, length(y)) #used for Poisson and Bern, essentially untouched
if(family.glmm$family.glmm=="binomial.glmm"){
#if the response is a vector, then ntrials stays at 1
#if the response is a matrix
if(length(dim(y))==2){
#make sure it has exactly 2 columns
if(ncol(y)!=2) stop("Your response must have two columns: the first column reports the number of successes and the second column reports the number of failures.")
# make ntrials a vector with each entry the sum of the entries in the corresponding col of y
ntrials <- apply(y, MARGIN=1, FUN=sum)
y <- y[,1] 	#then change y to just be the number of successes
}
}
#do the check for the specified family
family.glmm$checkData(y)
#then the part for the random effects.
#first, if it's not a list, make it a list
randcall<-random
if (! is.list(random))
random <- list(random)
#put this stuff in a loop and loop along the list
#for i in 1:length(formula2)
for (irandom in seq(along = random))
{
r<-random[[irandom]]
stopifnot(inherits(r, "formula"))
if (missing(data)) {
barf2 <- lm(r, method = "model.frame")
} else {
stopifnot(inherits(data, "data.frame"))
barf2 <- lm(r, data = data, method = "model.frame")
}
random[[irandom]] <- model.matrix(r, data = barf2)
#thisgroup<-varcomps.equal[irandom]
#names(random)[irandom]<-varcomps.names[thisgroup]
if(length(y)!=nrow(random[[irandom]])) {
stop("Fixed and random effect model matrices should have same number of rows. This problem sometimes arises due to NAs (missing data).")
}
}
#so now random is a list containing a model matrix for each formula, and some matrices share variance components
#	#family stuff
#	family.glmm<-getFamily(family.glmm)
#	#check that only binomial has y being matrix
#	if(length(dim(y))==2){
#		if(family.glmm$family.glmm!="binomial.glmm") {
#			stop("For the family you've specified, only a vector is appropriate as the response. Binomial is the only family that allows you to specify the response as a matrix.")
#		}
#	}
#	ntrials <- rep(1, length(y)) #used for Poisson and Bern, essentially untouched
#	if(family.glmm$family.glmm=="binomial.glmm"){
#		#if the response is a vector, then ntrials stays at 1
#		#if the response is a matrix
#		if(length(dim(y))==2){
#			#make sure it has exactly 2 columns
#			if(ncol(y)!=2) stop("Your response must have two columns: the first column reports the number of successes and the second column reports the number of failures.")
#			# make ntrials a vector with each entry the sum of the entries in the corresponding col of y
#			ntrials <- apply(y, MARGIN=1, FUN=sum)
#			y <- y[,1] 	#then change y to just be the number of successes
#		}
#	}
#	#do the check for the specified family
#	family.glmm$checkData(y)
if(is.numeric(varcomps.equal)==F) stop("varcomps.equal must be a vector containing numbers to indicate which variance components are equal.")
if(length(varcomps.equal)!=length(random)){
stop("The length of varcomps.equal must be equal to the length of the random-effects call.")}
if(length(unique(varcomps.equal))!=length(varcomps.names)){
stop("You must name each unique variance component. Check varcomps.names and varcomps.equal.")}
if(min(varcomps.equal)!=1)stop("The vector varcomps.equal must contain numbers starting at 1 to denote which variance components are equal.")
levs<-ordered(unique(varcomps.equal))
#check p1 p2 p3
if(!is.numeric(p1))stop("p1 must be a number between 0 and 1")
if(p1>1) stop("p1 must be a number between 0 and 1")
if(p1<0) stop("p1 must be a number between 0 and 1")
if(p1==0) stop("p1 must be nonzero")
if(!is.numeric(p2))stop("p2 must be a number between 0 and 1")
if(p2>1) stop("p2 must be a number between 0 and 1")
if(p2<0) stop("p2 must be a number between 0 and 1")
if(!is.numeric(p3))stop("p3 must be a number between 0 and 1")
if(p3>1) stop("p3 must be a number between 0 and 1")
if(p3<0) stop("p3 must be a number between 0 and 1")
if(p1+p2+p3!=1) stop("p1+p2+p3 must equal 1")
#this loop is a 2-4-1. We want to check that they're filling in varcomps.equal correctly.
#We also want to group all the design matrices that share a variance components.
#Now z is a list with the number of design mats = number of distinct variance components
z<-list()
for(i in 1:length(levs)){
if(levs[i]!=i) stop("The numbers in the vector varcomps.equal must be consecutive. You must start at 1 and then each entry must be the next consecutive number or a repeat of a previous number.")
these<-varcomps.equal==i
thesemats<-random[these]
z[[i]]<-do.call(cbind,thesemats)
}
names(z)<-varcomps.names
mod.mcml<-list(x = x, z=z, y = y, ntrials = ntrials)
cache <- new.env(parent = emptyenv())
if(doPQL==FALSE){
nrand<-lapply(mod.mcml$z,ncol)
nrandom<-unlist(nrand)
totnrandom<-sum(nrandom)
s.pql<-rep(0,totnrandom)
if(!is.null(par.init)){ #then par.init is already specified by user
beta.pql<-par.init[1:nbeta]
nu.pql<-par.init[-(1:nbeta)]
sigma.pql<-sqrt(nu.pql)
}
if(is.null(par.init)){
sigma.pql<-nu.pql<-rep(1,length(mod.mcml$z))
beta.pql<-rep(0,ncol(mod.mcml$x))
par.init<-c(beta.pql,nu.pql)
}
}
#calculate A*, D* and u*
nrand<-lapply(mod.mcml$z,ncol)
nrandom<-unlist(nrand)
q<-sum(nrandom)
if(q!=length(s.pql)) stop("Can't happen. Number of random effects returned by PQL must match number of random effects specified by model.")
eek<-getEk(mod.mcml$z)
#if any of the variance components are too close to 0, make them bigger:
if(any(sigma.pql<10^-3)){
theseguys<-which(sigma.pql<10^-3)
sigma.pql[theseguys]<-10^-3
}
Aks<-Map("*",eek,sigma.pql)
A.star<-addVecs(Aks) #at this point still a vector
D.star<-A.star*A.star #still a vector
u.star<-A.star*s.pql
Dstarinvdiag<-1/D.star
Dstarnotsparse<-diag(D.star)
D.star.inv<-Diagonal(length(u.star),Dstarinvdiag)
D.star<-Diagonal(length(u.star),D.star)
#now D.star.inv and D.star are both diagonal matrices
#Diagonal from Matrix package is used bc these are sparse matrices
#If q (# rand effs) is large, then need to be careful with these
#determine m1, m2, m3 based on probs p1, p2, p3
foo<-runif(m)
m1<-sum(foo<p1)
m2<-sum(foo<p1+p2)-m1
m3<-m-m1-m2
if(m1>0) genData<-rmvt(m1,sigma=Dstarnotsparse,df=zeta,type=c("shifted"))
if(m1==0) genData<-NULL
#generate m2 from N(u*,D*)
if(m2>0) genData2<-genRand(u.star,D.star,m2)
if(m2==0) genData2<-NULL
#generate m3 from N(u*,(Z'c''(Xbeta*+zu*)Z+D*^{-1})^-1)
if(m3>0){
Z=do.call(cbind,mod.mcml$z)
eta.star<-as.vector(mod.mcml$x%*%beta.pql+Z%*%u.star)
if(family.glmm$family.glmm=="bernoulli.glmm") {cdouble<-family.glmm$cpp(eta.star)}
if(family.glmm$family.glmm=="poisson.glmm"){cdouble<-family.glmm$cpp(eta.star)}
if(family.glmm$family.glmm=="binomial.glmm"){cdouble<-family.glmm$cpp(eta.star, ntrials)}
#still a vector
cdouble<-Diagonal(length(cdouble),cdouble)
Sigmuh.inv<- t(Z)%*%cdouble%*%Z+D.star.inv
Sigmuh<-solve(Sigmuh.inv)
genData3<-genRand(u.star,Sigmuh,m3)
}
if(m3==0) genData3<-NULL
#	#these are from distribution based on data
#	if(distrib=="tee")genData<-genRand(sigma.gen,s.pql,mod.mcml$z,m1,distrib="tee",gamm)
#	if(distrib=="normal")genData<-genRand(sigma.pql,s.pql,mod.mcml$z,m1,distrib="normal",gamm)
#	#these are from standard normal
#	ones<-rep(1,length(sigma.pql))
#	zeros<-rep(0,length(s.pql))
#	genData2<-genRand(ones,zeros,mod.mcml$z,m2,distrib="normal",gamm)
umat<-rbind(genData,genData2,genData3)
no_cores <- max(1, detectCores() - 1)
return(list(umat=umat, par = par.init, nbeta=ncol(mod.mcml$x), nu.pql=nu.pql, u.star=u.star, mod.mcml=mod.mcml, family.glmm=family.glmm, cache=cache, p1=p1, p2=p2, p3=p3, m1=m1, D.star=D.star, Sigmuh=Sigmuh, Sigmuh.inv=Sigmuh.inv, zeta=zeta, ntrials=ntrials, no_cores = no_cores))
}
cc <- Checkglmm(fixed = Mate ~ 0 + Cross,random = list(~ 0 + Female, ~ 0 + Male), varcomps.names = c("F", "M"),data = salamander, family.glmm = bernoulli.glmm, m=1000, doPQL=FALSE, debug=FALSE,p1=1/3,p2=1/3,p3=1/3,rmax=1000,iterlim=1000,par.init=NULL,zeta=5)
stuff<-.C("objfunc", as.double(mod.mcml$y),as.double(t(umat)), as.integer(myq), as.integer(m), as.double(mod.mcml$x), as.integer(n), as.integer(nbeta), as.double(beta), as.double(Z), as.double(Dinvfornu), as.double(logdetDinvfornu),as.integer(family_glmm), as.double(D.star.inv), as.double(logdet.D.star.inv), as.double(u.star), as.double(Sigmuh.inv), as.double(logdet.Sigmuh.inv), pea=as.double(pea), nps=as.integer(length(pea)), T=as.integer(T), nrandom=as.integer(nrandom), meow=as.integer(meow),nu=as.double(nu), zeta=as.integer(zeta),tconst=as.double(tconst), v=double(m), ntrials=as.integer(ntrials), value=double(1),gradient=double(length(par)),hessian=double((length(par))^2))
stuff
is.vector(stuff$hessian)
list(stuff)
list(value=stuff$value,gradient=stuff$gradient,hessian=matrix(stuff$hessian,ncol=length(par),byrow=FALSE))
?parLapply
cl <- makeCluster(no_cores)
clusterExport(cl, c("umat", "myq", "m", "mod.mcml", "n", "nbeta", "beta", "Z", "Dinvfornu", "logdetDinvfornu", "family_glmm", "D.star.inv", "logdet.D.star.inv", "u.star", "newsig", "lnps", "logdet.Sigmuh.inv", "pea", "T", "nrandom", "meow", "nu", "zeta", "tconst", "ntrials", "grad", "hess", "val", "vv"), envir = environment())
stuff <- parRapply(cl, umat, .C("objfunc", as.double(mod.mcml$y),as.double(t(umat)), as.integer(myq), as.integer(m), as.double(mod.mcml$x), as.integer(n), as.integer(nbeta), as.double(beta), as.double(Z), as.double(Dinvfornu), as.double(logdetDinvfornu),as.integer(family_glmm), as.double(D.star.inv), as.double(logdet.D.star.inv), as.double(u.star), as.double(newsig), as.double(logdet.Sigmuh.inv), pea=as.double(pea), nps=as.integer(lnps), T=as.integer(T), nrandom=as.integer(nrandom), meow=as.integer(meow),nu=as.double(nu), zeta=as.integer(zeta),tconst=as.double(tconst), v=as.double(vv), ntrials=as.integer(ntrials), value=as.double(val),gradient=as.double(grad),hessian=as.double(hess)))
umat
fun <- function(umat){
.C("objfunc", as.double(mod.mcml$y),as.double(t(umat)), as.integer(myq), as.integer(m), as.double(mod.mcml$x), as.integer(n), as.integer(nbeta), as.double(beta), as.double(Z), as.double(Dinvfornu), as.double(logdetDinvfornu),as.integer(family_glmm), as.double(D.star.inv), as.double(logdet.D.star.inv), as.double(u.star), as.double(newsig), as.double(logdet.Sigmuh.inv), pea=as.double(pea), nps=as.integer(lnps), T=as.integer(T), nrandom=as.integer(nrandom), meow=as.integer(meow),nu=as.double(nu), zeta=as.integer(zeta),tconst=as.double(tconst), v=as.double(vv), ntrials=as.integer(ntrials), value=as.double(val),gradient=as.double(grad),hessian=as.double(hess))
}
stuff <- parRapply(cl, umat, fun(umat))
fun <- function(umat){
.C("objfunc", as.double(mod.mcml$y),as.double(t(umat)), as.integer(myq), as.integer(nrow(umat)), as.double(mod.mcml$x), as.integer(n), as.integer(nbeta), as.double(beta), as.double(Z), as.double(Dinvfornu), as.double(logdetDinvfornu),as.integer(family_glmm), as.double(D.star.inv), as.double(logdet.D.star.inv), as.double(u.star), as.double(newsig), as.double(logdet.Sigmuh.inv), pea=as.double(pea), nps=as.integer(lnps), T=as.integer(T), nrandom=as.integer(nrandom), meow=as.integer(meow),nu=as.double(nu), zeta=as.integer(zeta),tconst=as.double(tconst), v=double(nrow(umat)), ntrials=as.integer(ntrials), value=as.double(val),gradient=as.double(grad),hessian=as.double(hess))
}
stuff <- parRapply(cl, umat, fun(umat))
no_cores <- 1
cl <- makeCluster(no_cores)
registerDoParallel(cl)
clusterEvalQ(cl, library(itertools))
clusterExport(cl, c("umat", "myq", "m", "mod.mcml", "n", "nbeta", "beta", "Z", "Dinvfornu", "logdetDinvfornu", "family_glmm", "D.star.inv", "logdet.D.star.inv", "u.star", "newsig", "lnps", "logdet.Sigmuh.inv", "pea", "T", "nrandom", "meow", "nu", "zeta", "tconst", "ntrials", "grad", "hess", "val", "vv"), envir = environment())
stuff <- foreach(umat=isplitRows(umat, chunks = no_cores)) %dopar% {fun(umat)}
cc <- Checkglmm(fixed = Mate ~ 0 + Cross,random = list(~ 0 + Female, ~ 0 + Male), varcomps.names = c("F", "M"),data = salamander, family.glmm = bernoulli.glmm, m=1000, doPQL=FALSE, debug=FALSE,p1=1/3,p2=1/3,p3=1/3,rmax=1000,iterlim=1000,par.init=NULL,zeta=5)
oo <- objfun(par = cc$par, nbeta = cc$nbeta, nu.pql = cc$nu.pql, umat = cc$umat, u.star = cc$u.star, mod.mcml = cc$mod.mcml, family.glmm = cc$family.glmm, cache = cc$cache, p1 = cc$p1, p2 = cc$p2, p3 = cc$p3, m1 = cc$m1, D.star = cc$D.star, Sigmuh = cc$Sigmuh, Sigmuh.inv = cc$Sigmuh.inv, zeta = cc$zeta, ntrials = cc$ntrials, no_cores = cc$no_cores)
objfun <-
function(par, nbeta, nu.pql, umat, u.star, mod.mcml, family.glmm, cache, p1, p2, p3, m1, D.star, Sigmuh, Sigmuh.inv, zeta, ntrials, no_cores){
beta<-par[1:nbeta]
nu<-par[-(1:nbeta)]
m<-nrow(umat)
if (!missing(cache)) stopifnot(is.environment(cache))
if(any(nu<=0)){
out<-list(value=-Inf,gradient=rep(1,length(par)),hessian=as.matrix(c(rep(1,length(par)^2)),nrow=length(par)))
return(out)
}
Z=do.call(cbind,mod.mcml$z)
T<-length(mod.mcml$z)
nrand<-lapply(mod.mcml$z,ncol)
nrandom<-unlist(nrand)
family.glmm<-getFamily(family.glmm)
if(family.glmm$family.glmm=="bernoulli.glmm"){family_glmm=1}
if(family.glmm$family.glmm=="poisson.glmm"){family_glmm=2}
if(family.glmm$family.glmm=="binomial.glmm"){family_glmm=3}
Dstarinvdiag<-1/diag(D.star)
D.star.inv<-diag(Dstarinvdiag)
logdet.D.star.inv<-	-sum(log(diag(D.star)))
logdet.Sigmuh.inv<-sum(log(eigen(Sigmuh.inv,symmetric=TRUE)$values))
myq<-nrow(D.star.inv)
tconst<-tconstant(zeta,myq,Dstarinvdiag)
#for the particular value of nu we're interested in, need to prep for distRandGenC
eek<-getEk(mod.mcml$z)
preDinvfornu<-Map("*",eek,(1/nu))
Dinvfornu<-addVecs(preDinvfornu)
logdetDinvfornu<-sum(log(Dinvfornu))
Dinvfornu <- diag(Dinvfornu)
meow<-rep(1,T+1)
meow[1]<-0
throwaway<-T+1
meow[2:throwaway]<-cumsum(nrandom)
pea<-c(p1,p2,p3)
n <- nrow(mod.mcml$x)
##need to scale first m1 vectors of generated random effects by multiplying by A
#	preAfornu<-Map("*",eek,sqrt(nu))
#	Afornu<-addVecs(preAfornu)
#	for(k in 1:m1){
#		u.swoop<-umat[k,]
#		umat[k,]<-u.swoop*Afornu
#		}
library(parallel)
library(doParallel)
library(foreach)
library(itertools)
newsig <- as.double(Sigmuh.inv)
grad <- double(length(par))
hess <- double((length(par))^2)
lnps <- length(pea)
val <- double(1)
vv <- double(m)
#fun <- function(umat){
# .C("objfunc", as.double(mod.mcml$y),as.double(t(umat)), as.integer(myq), as.integer(nrow(umat)), as.double(mod.mcml$x), as.integer(n), as.integer(nbeta), as.double(beta), as.double(Z), as.double(Dinvfornu), as.double(logdetDinvfornu),as.integer(family_glmm), as.double(D.star.inv), as.double(logdet.D.star.inv), as.double(u.star), as.double(newsig), as.double(logdet.Sigmuh.inv), pea=as.double(pea), nps=as.integer(lnps), T=as.integer(T), nrandom=as.integer(nrandom), meow=as.integer(meow),nu=as.double(nu), zeta=as.integer(zeta),tconst=as.double(tconst), v=double(nrow(umat)), ntrials=as.integer(ntrials), value=as.double(val),gradient=as.double(grad),hessian=as.double(hess))
#	}
cl <- makeCluster(no_cores)
registerDoParallel(cl)
clusterEvalQ(cl, library(itertools))
clusterExport(cl, c("umat", "myq", "m", "mod.mcml", "n", "nbeta", "beta", "Z", "Dinvfornu", "logdetDinvfornu", "family_glmm", "D.star.inv", "logdet.D.star.inv", "u.star", "newsig", "lnps", "logdet.Sigmuh.inv", "pea", "T", "nrandom", "meow", "nu", "zeta", "tconst", "ntrials", "grad", "hess", "val", "vv"), envir = environment())
#stuff <- foreach(umat=isplitRows(umat, chunks = no_cores)) %dopar% {.C("objfunc", as.double(mod.mcml$y),as.double(t(umat)), as.integer(myq), as.integer(m), as.double(mod.mcml$x), as.integer(n), as.integer(nbeta), as.double(beta), as.double(Z), as.double(Dinvfornu), as.double(logdetDinvfornu),as.integer(family_glmm), as.double(D.star.inv), as.double(logdet.D.star.inv), as.double(u.star), as.double(newsig), as.double(logdet.Sigmuh.inv), pea=as.double(pea), nps=as.integer(lnps), T=as.integer(T), nrandom=as.integer(nrandom), meow=as.integer(meow),nu=as.double(nu), zeta=as.integer(zeta),tconst=as.double(tconst), v=as.double(vv), ntrials=as.integer(ntrials), value=as.double(val),gradient=as.double(grad),hessian=as.double(hess))}
stuff <- foreach(umat=isplitRows(umat, chunks = no_cores)) %dopar% {fun(umat)}
#stuff$gradient <- cbind(stuff$gradient)
#stuff$hessian <- cbind(stuff$hessian)
stopCluster(cl)
#cl <- makeCluster(no_cores)
#clusterExport(cl, c("umat", "myq", "m", "mod.mcml", "n", "nbeta", "beta", "Z", "Dinvfornu", "logdetDinvfornu", "family_glmm", "D.star.inv", "logdet.D.star.inv", "u.star", "newsig", "lnps", "logdet.Sigmuh.inv", "pea", "T", "nrandom", "meow", "nu", "zeta", "tconst", "ntrials", "grad", "hess", "val", "vv"), envir = environment())
#stuff <- parRapply(cl, umat, fun(umat))
#stuff<-.C("objfunc", as.double(mod.mcml$y),as.double(t(umat)), as.integer(myq), as.integer(m), as.double(mod.mcml$x), as.integer(n), as.integer(nbeta), as.double(beta), as.double(Z), as.double(Dinvfornu), as.double(logdetDinvfornu),as.integer(family_glmm), as.double(D.star.inv), as.double(logdet.D.star.inv), as.double(u.star), as.double(Sigmuh.inv), as.double(logdet.Sigmuh.inv), pea=as.double(pea), nps=as.integer(length(pea)), T=as.integer(T), nrandom=as.integer(nrandom), meow=as.integer(meow),nu=as.double(nu), zeta=as.integer(zeta),tconst=as.double(tconst), v=double(m), ntrials=as.integer(ntrials), value=double(1),gradient=double(length(par)),hessian=double((length(par))^2))
#R CMD BUILD name
#R CMD check tar --as-cran
#--> description change version 1.2.4, change date, add contributer
if (!missing(cache)) cache$weights<-stuff$v
list(stuff)
#list(value=stuff$value,gradient=stuff$gradient,hessian=matrix(stuff$hessian,ncol=length(par),byrow=FALSE))
}
oo <- objfun(par = cc$par, nbeta = cc$nbeta, nu.pql = cc$nu.pql, umat = cc$umat, u.star = cc$u.star, mod.mcml = cc$mod.mcml, family.glmm = cc$family.glmm, cache = cc$cache, p1 = cc$p1, p2 = cc$p2, p3 = cc$p3, m1 = cc$m1, D.star = cc$D.star, Sigmuh = cc$Sigmuh, Sigmuh.inv = cc$Sigmuh.inv, zeta = cc$zeta, ntrials = cc$ntrials, no_cores = cc$no_cores)
oo <- objfun(par = cc$par, nbeta = cc$nbeta, nu.pql = cc$nu.pql, umat = cc$umat, u.star = cc$u.star, mod.mcml = cc$mod.mcml, family.glmm = cc$family.glmm, cache = cc$cache, p1 = cc$p1, p2 = cc$p2, p3 = cc$p3, m1 = cc$m1, D.star = cc$D.star, Sigmuh = cc$Sigmuh, Sigmuh.inv = cc$Sigmuh.inv, zeta = cc$zeta, ntrials = cc$ntrials, no_cores = 1)
oo <- objfun(par = cc$par, nbeta = cc$nbeta, nu.pql = cc$nu.pql, umat = cc$umat, u.star = cc$u.star, mod.mcml = cc$mod.mcml, family.glmm = cc$family.glmm, cache = cc$cache, p1 = cc$p1, p2 = cc$p2, p3 = cc$p3, m1 = cc$m1, D.star = cc$D.star, Sigmuh = cc$Sigmuh, Sigmuh.inv = cc$Sigmuh.inv, zeta = cc$zeta, ntrials = cc$ntrials, no_cores = 1)
objfun <-
function(par, nbeta, nu.pql, umat, u.star, mod.mcml, family.glmm, cache, p1, p2, p3, m1, D.star, Sigmuh, Sigmuh.inv, zeta, ntrials, no_cores){
beta<-par[1:nbeta]
nu<-par[-(1:nbeta)]
m<-nrow(umat)
if (!missing(cache)) stopifnot(is.environment(cache))
if(any(nu<=0)){
out<-list(value=-Inf,gradient=rep(1,length(par)),hessian=as.matrix(c(rep(1,length(par)^2)),nrow=length(par)))
return(out)
}
Z=do.call(cbind,mod.mcml$z)
T<-length(mod.mcml$z)
nrand<-lapply(mod.mcml$z,ncol)
nrandom<-unlist(nrand)
family.glmm<-getFamily(family.glmm)
if(family.glmm$family.glmm=="bernoulli.glmm"){family_glmm=1}
if(family.glmm$family.glmm=="poisson.glmm"){family_glmm=2}
if(family.glmm$family.glmm=="binomial.glmm"){family_glmm=3}
Dstarinvdiag<-1/diag(D.star)
D.star.inv<-diag(Dstarinvdiag)
logdet.D.star.inv<-	-sum(log(diag(D.star)))
logdet.Sigmuh.inv<-sum(log(eigen(Sigmuh.inv,symmetric=TRUE)$values))
myq<-nrow(D.star.inv)
tconst<-tconstant(zeta,myq,Dstarinvdiag)
#for the particular value of nu we're interested in, need to prep for distRandGenC
eek<-getEk(mod.mcml$z)
preDinvfornu<-Map("*",eek,(1/nu))
Dinvfornu<-addVecs(preDinvfornu)
logdetDinvfornu<-sum(log(Dinvfornu))
Dinvfornu <- diag(Dinvfornu)
meow<-rep(1,T+1)
meow[1]<-0
throwaway<-T+1
meow[2:throwaway]<-cumsum(nrandom)
pea<-c(p1,p2,p3)
n <- nrow(mod.mcml$x)
##need to scale first m1 vectors of generated random effects by multiplying by A
#	preAfornu<-Map("*",eek,sqrt(nu))
#	Afornu<-addVecs(preAfornu)
#	for(k in 1:m1){
#		u.swoop<-umat[k,]
#		umat[k,]<-u.swoop*Afornu
#		}
library(parallel)
library(doParallel)
library(foreach)
library(itertools)
newsig <- as.double(Sigmuh.inv)
grad <- double(length(par))
hess <- double((length(par))^2)
lnps <- length(pea)
val <- double(1)
vv <- double(m)
#fun <- function(umat){
# .C("objfunc", as.double(mod.mcml$y),as.double(t(umat)), as.integer(myq), as.integer(nrow(umat)), as.double(mod.mcml$x), as.integer(n), as.integer(nbeta), as.double(beta), as.double(Z), as.double(Dinvfornu), as.double(logdetDinvfornu),as.integer(family_glmm), as.double(D.star.inv), as.double(logdet.D.star.inv), as.double(u.star), as.double(newsig), as.double(logdet.Sigmuh.inv), pea=as.double(pea), nps=as.integer(lnps), T=as.integer(T), nrandom=as.integer(nrandom), meow=as.integer(meow),nu=as.double(nu), zeta=as.integer(zeta),tconst=as.double(tconst), v=double(nrow(umat)), ntrials=as.integer(ntrials), value=as.double(val),gradient=as.double(grad),hessian=as.double(hess))
#	}
cl <- makeCluster(no_cores)
registerDoParallel(cl)
clusterEvalQ(cl, library(itertools))
clusterExport(cl, c("umat", "myq", "m", "mod.mcml", "n", "nbeta", "beta", "Z", "Dinvfornu", "logdetDinvfornu", "family_glmm", "D.star.inv", "logdet.D.star.inv", "u.star", "newsig", "lnps", "logdet.Sigmuh.inv", "pea", "T", "nrandom", "meow", "nu", "zeta", "tconst", "ntrials", "grad", "hess", "val", "vv"), envir = environment())
stuff <- foreach(umat=isplitRows(umat, chunks = no_cores)) %dopar% {.C("objfunc", as.double(mod.mcml$y),as.double(t(umat)), as.integer(myq), as.integer(m), as.double(mod.mcml$x), as.integer(n), as.integer(nbeta), as.double(beta), as.double(Z), as.double(Dinvfornu), as.double(logdetDinvfornu),as.integer(family_glmm), as.double(D.star.inv), as.double(logdet.D.star.inv), as.double(u.star), as.double(newsig), as.double(logdet.Sigmuh.inv), pea=as.double(pea), nps=as.integer(lnps), T=as.integer(T), nrandom=as.integer(nrandom), meow=as.integer(meow),nu=as.double(nu), zeta=as.integer(zeta),tconst=as.double(tconst), v=as.double(vv), ntrials=as.integer(ntrials), value=as.double(val),gradient=as.double(grad),hessian=as.double(hess))}
#stuff <- foreach(umat=isplitRows(umat, chunks = no_cores)) %dopar% {fun(umat)}
#stuff$gradient <- cbind(stuff$gradient)
#stuff$hessian <- cbind(stuff$hessian)
stopCluster(cl)
#cl <- makeCluster(no_cores)
#clusterExport(cl, c("umat", "myq", "m", "mod.mcml", "n", "nbeta", "beta", "Z", "Dinvfornu", "logdetDinvfornu", "family_glmm", "D.star.inv", "logdet.D.star.inv", "u.star", "newsig", "lnps", "logdet.Sigmuh.inv", "pea", "T", "nrandom", "meow", "nu", "zeta", "tconst", "ntrials", "grad", "hess", "val", "vv"), envir = environment())
#stuff <- parRapply(cl, umat, fun(umat))
#stuff<-.C("objfunc", as.double(mod.mcml$y),as.double(t(umat)), as.integer(myq), as.integer(m), as.double(mod.mcml$x), as.integer(n), as.integer(nbeta), as.double(beta), as.double(Z), as.double(Dinvfornu), as.double(logdetDinvfornu),as.integer(family_glmm), as.double(D.star.inv), as.double(logdet.D.star.inv), as.double(u.star), as.double(Sigmuh.inv), as.double(logdet.Sigmuh.inv), pea=as.double(pea), nps=as.integer(length(pea)), T=as.integer(T), nrandom=as.integer(nrandom), meow=as.integer(meow),nu=as.double(nu), zeta=as.integer(zeta),tconst=as.double(tconst), v=double(m), ntrials=as.integer(ntrials), value=double(1),gradient=double(length(par)),hessian=double((length(par))^2))
#R CMD BUILD name
#R CMD check tar --as-cran
#--> description change version 1.2.4, change date, add contributer
if (!missing(cache)) cache$weights<-stuff$v
list(stuff)
#list(value=stuff$value,gradient=stuff$gradient,hessian=matrix(stuff$hessian,ncol=length(par),byrow=FALSE))
}
oo <- objfun(par = cc$par, nbeta = cc$nbeta, nu.pql = cc$nu.pql, umat = cc$umat, u.star = cc$u.star, mod.mcml = cc$mod.mcml, family.glmm = cc$family.glmm, cache = cc$cache, p1 = cc$p1, p2 = cc$p2, p3 = cc$p3, m1 = cc$m1, D.star = cc$D.star, Sigmuh = cc$Sigmuh, Sigmuh.inv = cc$Sigmuh.inv, zeta = cc$zeta, ntrials = cc$ntrials, no_cores = 1)
?clusterExport
dyn.load("objfunc.so")
dyn.load(objfunc.so)
dyn.load("objfunc.so")
cl <- makeCluster(no_cores)
registerDoParallel(cl)
clusterEvalQ(cl, library(itertools))
clusterExport(cl, c("umat", "myq", "m", "mod.mcml", "n", "nbeta", "beta", "Z", "Dinvfornu", "logdetDinvfornu", "family_glmm", "D.star.inv", "logdet.D.star.inv", "u.star", "newsig", "lnps", "logdet.Sigmuh.inv", "pea", "T", "nrandom", "meow", "nu", "zeta", "tconst", "ntrials", "grad", "hess", "val", "vv", "fun"), envir = environment())
stuff <- foreach(umat=isplitRows(umat, chunks = no_cores)) %dopar% {.C("objfunc", as.double(mod.mcml$y),as.double(t(umat)), as.integer(myq), as.integer(nrow(umat)), as.double(mod.mcml$x), as.integer(n), as.integer(nbeta), as.double(beta), as.double(Z), as.double(Dinvfornu), as.double(logdetDinvfornu),as.integer(family_glmm), as.double(D.star.inv), as.double(logdet.D.star.inv), as.double(u.star), as.double(newsig), as.double(logdet.Sigmuh.inv), pea=as.double(pea), nps=as.integer(lnps), T=as.integer(T), nrandom=as.integer(nrandom), meow=as.integer(meow),nu=as.double(nu), zeta=as.integer(zeta),tconst=as.double(tconst), v=as.double(vv), ntrials=as.integer(ntrials), value=as.double(val),gradient=as.double(grad),hessian=as.double(hess))}
