ln(1)
log(1)
neg.binomial.glm <- function(){
family.glm <- "neg.binomial.glm"
link <- "log(1-p)"
cum <- function(eta, r){
-r*log(1-exp(eta))+r*eta
}
cp <- function(eta, r){
(r*exp(eta))/(1-exp(eta))+r
}
cpp <- function(eta, r){
(r*exp(eta))/((1-exp(eta))^2)
}
}
this <- neg.binomial.glm()$cp(theta)*delta
this <- neg.binomial.glm()$cp(theta, 5)*delta
neg.binomial.glm()
neg.binomial.glm(theta)
neg.binomial.glm()$cp
log1p()
?log1p
cp(4, 7)
neg.binomial.glm <- function(){
family.glm <- "neg.binomial.glm"
link <- "log(1-p)"
cum <- function(eta, r){
-r*log(1-exp(eta))+r*eta
}
cp <- function(eta, r){
(r*exp(eta))/(1-exp(eta))+r
}
cpp <- function(eta, r){
(r*exp(eta))/((1-exp(eta))^2)
}
checkData<-function(x) {
bads<-sum(x<0)
if(bads>0) stop("data must be nonnegative integers.")
if(is.integer(x)==FALSE) stop("data must be nonnegative integers.")
return(NULL)
}
out<-list(family.glmm=family.glmm, link=link, cum=cum, cp=cp, cpp=cpp, checkData=checkData)
class(out)<-"glmm.family"
return(out)
}
this <- neg.binomial.glm()$cp(theta)*delta
getFamily <-function(family.glmm)
{
if(is.character(family.glmm))
family.glmm<-get(family.glmm,mode="function",envir=parent.frame())
if(is.function(family.glmm))
family.glmm<-family.glmm()
#right way to check the class if there might be more than one class (maybe bc of hierarchies)
if(!inherits(family.glmm,"glmm.family"))
stop(" 'family.glmm' not recognized")
family.glmm
}
neg.binomial.glmm <- function(){
family.glmm <- "neg.binomial.glm"
link <- "log(1-p)"
cum <- function(eta, r){
-r*log(1-exp(eta))+r*eta
}
cp <- function(eta, r){
(r*exp(eta))/(1-exp(eta))+r
}
cpp <- function(eta, r){
(r*exp(eta))/((1-exp(eta))^2)
}
checkData<-function(x) {
bads<-sum(x<0)
if(bads>0) stop("data must be nonnegative integers.")
if(is.integer(x)==FALSE) stop("data must be nonnegative integers.")
return(NULL)
}
out<-list(family.glmm=family.glmm, link=link, cum=cum, cp=cp, cpp=cpp, checkData=checkData)
class(out)<-"glmm.family"
return(out)
}
this <- neg.binomial.glm()$cp(theta)*delta
neg.binomial.glmm <- function(){
family.glmm <- "neg.binomial.glmm"
link <- "log(1-p)"
cum <- function(eta, r){
-r*log(1-exp(eta))+r*eta
}
cp <- function(eta, r){
(r*exp(eta))/(1-exp(eta))+r
}
cpp <- function(eta, r){
(r*exp(eta))/((1-exp(eta))^2)
}
checkData<-function(x) {
bads<-sum(x<0)
if(bads>0) stop("data must be nonnegative integers.")
if(is.integer(x)==FALSE) stop("data must be nonnegative integers.")
return(NULL)
}
out<-list(family.glmm=family.glmm, link=link, cum=cum, cp=cp, cpp=cpp, checkData=checkData)
class(out)<-"glmm.family"
return(out)
}
this <- neg.binomial.glm()$cp(theta)*delta
neg.binomial.glmm()$cp
this <- neg.binomial.glmm()$cp(theta)*delta
this <- neg.binomial.glmm()$cp(2, 1)*delta
library(glmm)
theta<-1
delta<-.01
this <- neg.binomial.glmm()$cp(2, 1)*delta
theta<-2
this <- neg.binomial.glmm()$cp(theta, 1)*delta
that <- neg.binomial.glmm()$cum(theta+delta)-neg.bimomial.glmm()$cum(theta)
that <- neg.binomial.glmm()$cum(theta+delta, 1)-neg.bimomial.glmm()$cum(theta, 1)
that <- neg.binomial.glmm()$cum(theta+delta, 1)-neg.binomial.glmm()$cum(theta, 1)
exp(2)
1-exp(2)
log(1-exp(2))
log(1-.5)
log(1)
log(.7)
log(.3)
log(.1)
log(.01)
theta<- -1
this <- neg.binomial.glmm()$cp(theta, 1)*delta
that <- neg.binomial.glmm()$cum(theta+delta, 1)-neg.bimomial.glmm()$cum(theta, 1)
that <- neg.binomial.glmm()$cum(theta+delta, 1)-neg.binomial.glmm()$cum(theta, 1)
all.equal(this, that)
this <- neg.binomial.glmm()$cpp(theta, 1)*delta
that <- neg.binomial.glmm()$cp(theta+delta, 1)-neg.binomial.glmm()$cp(theta, 1)
all.equal(this, that)
knitr::opts_chunk$set(echo = TRUE)
plot(AirPassengers)
decompose(log(AirPassengers))
plot(decomp)
decomp <- decompose(log(AirPassengers))
plot(decomp)
?AirPassengers
knitr::opts_chunk$set(echo = TRUE)
library(forecast)
library(quantmod)
library(tseries)
library(timeSeries)
library(forecast)
library(xts)
diffseas <- diff(log(AirPassengers), lag=12)
plot(diffseas)
adf.test(diffseas)
?adf.test
Acf(diffseas)
Pacf(diffseas)
mod1 <- arima(log(AirPassengers), order = c(1, 0, 4), season = c(0, 1, 1), period = 12)
mod1 <- arima(log(AirPassengers), order = c(1, 0, 4), season = list(order = c(0, 1, 1), period= 12))
summary(mod1)
length(AirPassengers)
coef(mod1)
se(mod1)
mod1$coef
mod1$var.coef
summary(mod1)$se
summary(mod1)$coefficients
summary(mod1)[coefficients]
coef(mod1)/sqrt(vcov(mod1))
coef(mod1)/sqrt(diag(vcov(mod1)))
2*pt(abs(teststats), df=138, lower.tail=FALSE)
teststats <- coef(mod1)/sqrt(diag(vcov(mod1)))
2*pt(abs(teststats), df=138, lower.tail=FALSE)
mod2 <- arima(log(AirPassengers), order = c(1, 0, 3), season = list(order = c(0, 1, 1), period= 12))
teststats <- coef(mod2)/sqrt(diag(vcov(mod2)))
2*pt(abs(teststats), df=138, lower.tail=FALSE)
mod2 <- arima(log(AirPassengers), order = c(1, 0, 3), season = list(order = c(0, 1, 1), period= 12))
teststats <- coef(mod2)/sqrt(diag(vcov(mod2)))
2*pt(abs(teststats), df=139, lower.tail=FALSE)
mod3 <- arima(log(AirPassengers), order = c(1, 0, 2), season = list(order = c(0, 1, 1), period= 12))
teststats <- coef(mod3)/sqrt(diag(vcov(mod3)))
2*pt(abs(teststats), df=140, lower.tail=FALSE)
mod4 <- arima(log(AirPassengers), order = c(1, 0, 1), season = list(order = c(0, 1, 1), period= 12))
teststats <- coef(mod4)/sqrt(diag(vcov(mod4)))
2*pt(abs(teststats), df=141, lower.tail=FALSE)
mod5 <- arima(log(AirPassengers), order = c(2, 0, 1), season = list(order = c(0, 1, 1), period= 12))
teststats <- coef(mod5)/sqrt(diag(vcov(mod5)))
2*pt(abs(teststats), df=140, lower.tail=FALSE)
Box.test(mod4$residuals, type = "Ljung")
